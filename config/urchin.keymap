/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include "keymap_italian.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layer definitions

#define BASE 0
#define SYM 1
#define EXT 2
#define FNC 3
#define SYM2 4
#define ACCENT 5
#define SETTINGS 6

// -----------------

&sk {
    // don't release mods on other mods presses

    ignore-modifiers;
};

/ {
    behaviors {
        // Enables holding the first mod-tap key
        // by performing a tap-release-hold sequence.
        // To use it: "&qt KEYCODE1 KEYCODE2"

        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.

        unstick: unstick {
            label = "ZM_unstick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // both right thumb keys
        // internal-left & external-right thumb keys
        // both left thumb keys

        combo_settings {
            timeout-ms = <200>;
            key-positions = <30 31>;
            bindings = <&mo SETTINGS>;
        };

        // left index & middle fingers (home-row)
        // hold control & space for Adobe workflow
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        default_layer {
            label = "Base";
            bindings = <
&kp Q  &kp W  &kp E  &kp R    &kp T          &kp Y            &kp U    &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F    &kp G          &kp H            &kp J    &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V    &kp B          &kp N            &kp M    &kp COMMA  &kp DOT  &kp SLASH
                     &mo EXT  &kp SPACE      &kp RIGHT_SHIFT  &mo SYM
            >;
        };

        // Numbers and high frequency symbols

        sym_layer {
            label = "Sym.";
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH          &kp DOLLAR         &kp PERCENT      &kp CARET       &kp AMPERSAND  &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp GRAVE        &kp PLUS     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LC(Z)        &kp MINUS       &sk RIGHT_ALT  &sk RCTRL          &sk LEFT_GUI          &kp PIPE
&kp IT_GREAT     &kp EQUAL    &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp LC(Y)        &kp UNDERSCORE  &kp SQT        &kp DOUBLE_QUOTES  &kp IT_PLUS           &kp BACKSLASH
                                                &trans             &key_repeat      &trans          &trans
            >;
        };

        // Main modifiers and arrow keys

        NAV_layer {
            label = "Nav.";
            bindings = <
&kp ESC     &kp CAPS       &to 4      &to 5          &sk C_AC_NEXT_KEYBOARD_LAYOUT_SELECT      &none     &none     &none         &none      &sk TAB
&kp TAB     &sk LGUI       &sk LCTRL  &sk LEFT_ALT   &kp ENTER                                 &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &kp END
&kp DELETE  &kp BACKSPACE  &kp ESC    &kp PAGE_DOWN  &kp PAGE_UP                               &kp HOME  &none     &none         &none      &none
                                      &trans         &kp SPACE                                 &trans    &trans
            >;
        };

        // Function keys with modifiers

        number_layer {
            label = "Numb.";
            bindings = <
&kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3  &kp NUMBER_4  &kp N5      &none   &none          &none      &none          &none
&kp NUMBER_6  &kp N7         &kp N8        &kp N9        &kp N0      &none   &sk RIGHT_ALT  &sk RCTRL  &sk RIGHT_GUI  &trans
&kp DELETE    &kp BACKSPACE  &none         &none         &none       &none   &none          &kp COMMA  &kp DOT        &none
                                           &trans        &trans      &trans  &trans
            >;
        };

        // Low frequency symbols.

        funct_layer {
            label = "Func.";
            bindings = <
&kp IT_CARET  &kp IT_UNDER  &kp IT_PND   &kp IT_EUR   &kp IT_HASH         &kp F1   &kp F2   &kp F3  &kp F4  &kp F5
&kp IT_BKTK   &kp IT_TILDE  &kp IT_BSLH  &kp IT_PIPE  &kp IT_AND          &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&none         &none         &kp IT_SECT  &kp IT_CCED  &kp IT_DEG          &kp F11  &kp F12  &none   &none   &none
                                         &to 0        &kp LEFT_SHIFT      &none    &none
            >;
        };

        // Used to type regional accents.

        media_layer {
            label = "Media";
            bindings = <
&none        &none        &none        &kp IT_CEGR  &none            &none             &kp C_BRI_DEC  &kp C_BRI_UP  &none       &none
&kp IT_AGRV  &kp IT_IGRV  &kp IT_OGRV  &kp IT_EGRV  &kp IT_EACU      &kp C_PREV        &kp C_VOL_DN   &kp C_VOL_UP  &kp C_NEXT  &none
&none        &none        &none        &kp IT_UGRV  &none            &kp C_MUTE        &none          &none         &none       &none
                                       &to 0        &none            &kp C_PLAY_PAUSE  &none
            >;
        };

        // Used to change the keyboard's settings.

        settings_layer {
            label = "Sett.";
            bindings = <
&bootloader  &none  &none  &bt BT_CLR  &bt BT_SEL 0      &bt BT_SEL 3  &none  &unstick  &none  &bootloader
&none        &none  &none  &none       &bt BT_SEL 1      &bt BT_SEL 4  &none  &none     &none  &none
&none        &none  &none  &none       &bt BT_SEL 2      &bt BT_SEL 5  &none  &none     &none  &none
                           &none       &none             &none         &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        layer_3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
